
STM32_Registers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800025c  0800025c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800025c  0800025c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800025c  0800025c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800025c  0800025c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800025c  0800025c  0001025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000260  08000260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08000264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  08000278  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000278  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000171  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000cb  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  00020278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000038  00000000  00000000  000202c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f40  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000458  00000000  00000000  00021240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003bb3  00000000  00000000  00021698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002524b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  0002529c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000014 	.word	0x20000014
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000244 	.word	0x08000244

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000018 	.word	0x20000018
 8000100:	08000244 	.word	0x08000244

08000104 <main>:
{
	for(int i = 0; i < delay_time * 700; i++);
}

int main(void)
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0

	*pRCC_IOPENReg |= 1;			//enabling clock for GPIOA (on board led for G070RB)
 8000108:	4b20      	ldr	r3, [pc, #128]	; (800018c <main+0x88>)
 800010a:	681b      	ldr	r3, [r3, #0]
 800010c:	681a      	ldr	r2, [r3, #0]
 800010e:	4b1f      	ldr	r3, [pc, #124]	; (800018c <main+0x88>)
 8000110:	681b      	ldr	r3, [r3, #0]
 8000112:	2101      	movs	r1, #1
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]
	*pRCC_IOPENReg |= (1<<2);		//enabling clock for GPIOC (on board button for G070RB)
 8000118:	4b1c      	ldr	r3, [pc, #112]	; (800018c <main+0x88>)
 800011a:	681b      	ldr	r3, [r3, #0]
 800011c:	681a      	ldr	r2, [r3, #0]
 800011e:	4b1b      	ldr	r3, [pc, #108]	; (800018c <main+0x88>)
 8000120:	681b      	ldr	r3, [r3, #0]
 8000122:	2104      	movs	r1, #4
 8000124:	430a      	orrs	r2, r1
 8000126:	601a      	str	r2, [r3, #0]

	*pGPIOA_MODERReg &= ~(1<<11);	//reset 11'th bit of MODER5
 8000128:	4b19      	ldr	r3, [pc, #100]	; (8000190 <main+0x8c>)
 800012a:	681b      	ldr	r3, [r3, #0]
 800012c:	681a      	ldr	r2, [r3, #0]
 800012e:	4b18      	ldr	r3, [pc, #96]	; (8000190 <main+0x8c>)
 8000130:	681b      	ldr	r3, [r3, #0]
 8000132:	4918      	ldr	r1, [pc, #96]	; (8000194 <main+0x90>)
 8000134:	400a      	ands	r2, r1
 8000136:	601a      	str	r2, [r3, #0]
	*pGPIOA_MODERReg |= (1<<10);	//set 10'th bit of MODER5	Output mode: 01
 8000138:	4b15      	ldr	r3, [pc, #84]	; (8000190 <main+0x8c>)
 800013a:	681b      	ldr	r3, [r3, #0]
 800013c:	681a      	ldr	r2, [r3, #0]
 800013e:	4b14      	ldr	r3, [pc, #80]	; (8000190 <main+0x8c>)
 8000140:	681b      	ldr	r3, [r3, #0]
 8000142:	2180      	movs	r1, #128	; 0x80
 8000144:	00c9      	lsls	r1, r1, #3
 8000146:	430a      	orrs	r2, r1
 8000148:	601a      	str	r2, [r3, #0]

	*pGPIOC_MODERReg &= ~(3<<26);	//reset 26'th and 27'th bit of MODER13 Input mode: 00
 800014a:	4b13      	ldr	r3, [pc, #76]	; (8000198 <main+0x94>)
 800014c:	681b      	ldr	r3, [r3, #0]
 800014e:	681a      	ldr	r2, [r3, #0]
 8000150:	4b11      	ldr	r3, [pc, #68]	; (8000198 <main+0x94>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4911      	ldr	r1, [pc, #68]	; (800019c <main+0x98>)
 8000156:	400a      	ands	r2, r1
 8000158:	601a      	str	r2, [r3, #0]

	for(;;)
	{

		((*pGPIOC_IDRReg >> 13 ) & 1) ? (*pGPIOA_ODRReg &= ~(1<<5)) : (*pGPIOA_ODRReg |= (1<<5));	//conditional operator: statement ? if true : if false;
 800015a:	4b11      	ldr	r3, [pc, #68]	; (80001a0 <main+0x9c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	0b5b      	lsrs	r3, r3, #13
 8000162:	2201      	movs	r2, #1
 8000164:	4013      	ands	r3, r2
 8000166:	d008      	beq.n	800017a <main+0x76>
 8000168:	4b0e      	ldr	r3, [pc, #56]	; (80001a4 <main+0xa0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <main+0xa0>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	2120      	movs	r1, #32
 8000174:	438a      	bics	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
 8000178:	e7ef      	b.n	800015a <main+0x56>
 800017a:	4b0a      	ldr	r3, [pc, #40]	; (80001a4 <main+0xa0>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	681a      	ldr	r2, [r3, #0]
 8000180:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <main+0xa0>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2120      	movs	r1, #32
 8000186:	430a      	orrs	r2, r1
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	e7e6      	b.n	800015a <main+0x56>
 800018c:	20000000 	.word	0x20000000
 8000190:	20000004 	.word	0x20000004
 8000194:	fffff7ff 	.word	0xfffff7ff
 8000198:	2000000c 	.word	0x2000000c
 800019c:	f3ffffff 	.word	0xf3ffffff
 80001a0:	20000010 	.word	0x20000010
 80001a4:	20000008 	.word	0x20000008

080001a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001a8:	480d      	ldr	r0, [pc, #52]	; (80001e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001ac:	e000      	b.n	80001b0 <Reset_Handler+0x8>
 80001ae:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001b0:	480c      	ldr	r0, [pc, #48]	; (80001e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80001b2:	490d      	ldr	r1, [pc, #52]	; (80001e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80001b4:	4a0d      	ldr	r2, [pc, #52]	; (80001ec <LoopForever+0xe>)
  movs r3, #0
 80001b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001b8:	e002      	b.n	80001c0 <LoopCopyDataInit>

080001ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001be:	3304      	adds	r3, #4

080001c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c4:	d3f9      	bcc.n	80001ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001c6:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001c8:	4c0a      	ldr	r4, [pc, #40]	; (80001f4 <LoopForever+0x16>)
  movs r3, #0
 80001ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001cc:	e001      	b.n	80001d2 <LoopFillZerobss>

080001ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d0:	3204      	adds	r2, #4

080001d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d4:	d3fb      	bcc.n	80001ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001d6:	f000 f811 	bl	80001fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001da:	f7ff ff93 	bl	8000104 <main>

080001de <LoopForever>:

LoopForever:
  b LoopForever
 80001de:	e7fe      	b.n	80001de <LoopForever>
  ldr   r0, =_estack
 80001e0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80001e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80001ec:	08000264 	.word	0x08000264
  ldr r2, =_sbss
 80001f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80001f4:	20000030 	.word	0x20000030

080001f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001f8:	e7fe      	b.n	80001f8 <ADC_IRQHandler>
	...

080001fc <__libc_init_array>:
 80001fc:	b570      	push	{r4, r5, r6, lr}
 80001fe:	2600      	movs	r6, #0
 8000200:	4d0c      	ldr	r5, [pc, #48]	; (8000234 <__libc_init_array+0x38>)
 8000202:	4c0d      	ldr	r4, [pc, #52]	; (8000238 <__libc_init_array+0x3c>)
 8000204:	1b64      	subs	r4, r4, r5
 8000206:	10a4      	asrs	r4, r4, #2
 8000208:	42a6      	cmp	r6, r4
 800020a:	d109      	bne.n	8000220 <__libc_init_array+0x24>
 800020c:	2600      	movs	r6, #0
 800020e:	f000 f819 	bl	8000244 <_init>
 8000212:	4d0a      	ldr	r5, [pc, #40]	; (800023c <__libc_init_array+0x40>)
 8000214:	4c0a      	ldr	r4, [pc, #40]	; (8000240 <__libc_init_array+0x44>)
 8000216:	1b64      	subs	r4, r4, r5
 8000218:	10a4      	asrs	r4, r4, #2
 800021a:	42a6      	cmp	r6, r4
 800021c:	d105      	bne.n	800022a <__libc_init_array+0x2e>
 800021e:	bd70      	pop	{r4, r5, r6, pc}
 8000220:	00b3      	lsls	r3, r6, #2
 8000222:	58eb      	ldr	r3, [r5, r3]
 8000224:	4798      	blx	r3
 8000226:	3601      	adds	r6, #1
 8000228:	e7ee      	b.n	8000208 <__libc_init_array+0xc>
 800022a:	00b3      	lsls	r3, r6, #2
 800022c:	58eb      	ldr	r3, [r5, r3]
 800022e:	4798      	blx	r3
 8000230:	3601      	adds	r6, #1
 8000232:	e7f2      	b.n	800021a <__libc_init_array+0x1e>
 8000234:	0800025c 	.word	0x0800025c
 8000238:	0800025c 	.word	0x0800025c
 800023c:	0800025c 	.word	0x0800025c
 8000240:	08000260 	.word	0x08000260

08000244 <_init>:
 8000244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800024a:	bc08      	pop	{r3}
 800024c:	469e      	mov	lr, r3
 800024e:	4770      	bx	lr

08000250 <_fini>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000256:	bc08      	pop	{r3}
 8000258:	469e      	mov	lr, r3
 800025a:	4770      	bx	lr
